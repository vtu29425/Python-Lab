#task 8.1
def number_sequence(start, end, step=1): 
current = start 
while current <= end: 
yield current 
current += step 
start = int(input("Enter the starting number: ")) 
end = int(input("Enter the ending number: ")) 
step = int(input("Enter the step value: ")) 
# Create the generator 
sequence_generator = number_sequence(start, end, step) 
# Print the generated sequence of numbers 
for number in sequence_generator: 
print(number)

#task 8.1(b)
def my_generator(n): 
# initialize counter 
value = 0 
# loop until counter is less than n 
while value < n: 
# produce the current value of the counter 
yield value 
# increment the counter 
value += 1 
# iterate over the generator object produced by my_generator 
for value in my_generator(3): 
# print each value produced by generator 
print(value)

#task 8.2
def uppercase_decorator(func): 
def wrapper(text): 
return func(text).upper() 
return wrapper 
def lowercase_decorator(func): 
def wrapper(text): 
return func(text).lower() 
return wrapper 
@uppercase_decorator 
def shout(text): 
return text 
@lowercase_decorator 
def whisper(text): 
return text 
def greet(func): 
greeting = func("Hi, I am created by a function passed as an argument.") 
print(greeting) 
greet(shout) 
greet(whisper)
